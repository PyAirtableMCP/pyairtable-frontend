name: E2E Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend-services/tenant-dashboard/**'
      - '.github/workflows/e2e-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend-services/tenant-dashboard/**'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        project: 
          - chromium-core
          - chromium-extended
          - firefox
          - webkit
          - mobile-chrome
          - mobile-safari

    defaults:
      run:
        working-directory: frontend-services/tenant-dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-services/tenant-dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          # Create test database
          touch test.db
          # Initialize database schema if needed
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma db push --force-reset
          fi
        env:
          DATABASE_URL: file:./test.db

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          # Wait for server to be ready
          npx wait-on http://localhost:3002 --timeout 120000
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          PORT: 3002

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.project }}
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          BASE_URL: http://localhost:3002

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.project }}
          path: |
            frontend-services/tenant-dashboard/test-results/
            frontend-services/tenant-dashboard/playwright-report/
          retention-days: 7

      - name: Upload test report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always() && matrix.project == 'chromium-core'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend-services/tenant-dashboard/test-results/html
          destination_dir: e2e-reports/${{ github.run_number }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    defaults:
      run:
        working-directory: frontend-services/tenant-dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-services/tenant-dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Setup test database
        run: |
          touch test.db
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma db push --force-reset
          fi
        env:
          DATABASE_URL: file:./test.db

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3002 --timeout 120000
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          PORT: 3002

      - name: Run performance tests
        run: |
          # Run specific performance-focused tests
          npx playwright test --project=chromium-core --grep="performance|response time"
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          BASE_URL: http://localhost:3002

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    defaults:
      run:
        working-directory: frontend-services/tenant-dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend-services/tenant-dashboard/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Setup test database
        run: |
          touch test.db
          if [ -f "prisma/schema.prisma" ]; then
            npx prisma db push --force-reset
          fi
        env:
          DATABASE_URL: file:./test.db

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3002 --timeout 120000
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          PORT: 3002

      - name: Run accessibility tests
        run: |
          # Run accessibility-focused tests
          npx playwright test --project=chromium-core --grep="accessibility|keyboard|screen reader"
        env:
          NODE_ENV: test
          DATABASE_URL: file:./test.db
          BASE_URL: http://localhost:3002

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## E2E Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Project | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          projects=("chromium-core" "chromium-extended" "firefox" "webkit" "mobile-chrome" "mobile-safari")
          
          for project in "${projects[@]}"; do
            if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
              echo "| $project | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $project | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the [test artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
      - name: Notify team of test failures
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }}`;
            
            const issueTitle = `E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `
            ## E2E Test Failure Alert
            
            **Run URL:** ${runUrl}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Trigger:** ${{ github.event_name }}
            
            The E2E tests have failed. Please check the test results and fix any issues.
            
            ### Next Steps:
            1. Review the failed test results
            2. Check for any infrastructure issues
            3. Fix failing tests or update them if needed
            4. Verify the fix with a new test run
            
            This issue will be automatically closed when tests pass again.
            `;
            
            // Check if there's already an open issue for E2E test failures
            const existingIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'e2e-test-failure'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner,
                repo,
                title: issueTitle,
                body: issueBody,
                labels: ['e2e-test-failure', 'bug', 'priority-high']
              });
            }

  close-failure-issues:
    name: Close Failure Issues
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Close E2E failure issues
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            const openIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'e2e-test-failure'
            });
            
            for (const issue of openIssues.data) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issue.number,
                body: `✅ E2E tests are now passing. Closing this issue.
                
                **Fixed in:** ${{ github.sha }}
                **Run URL:** https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }}`
              });
              
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }