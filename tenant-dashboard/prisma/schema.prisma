// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  
  // User preferences
  timezone      String    @default("UTC")
  locale        String    @default("en-US")
  theme         String    @default("light")
  
  // Security
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  lastLoginAt      DateTime? @map("last_login_at")
  loginCount       Int     @default(0) @map("login_count")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  tenantMembers TenantMember[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Tenant management models
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  
  // Status
  status      TenantStatus @default(ACTIVE)
  
  // Plan information
  planId      String    @map("plan_id")
  plan        Plan      @relation(fields: [planId], references: [id])
  
  // Settings (stored as JSON)
  settings    Json      @default("{}")
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  members     TenantMember[]
  
  @@map("tenants")
}

model TenantMember {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  userId   String @map("user_id")
  role     TenantRole @default(MEMBER)
  status   MemberStatus @default(ACTIVE)
  
  // Permissions (stored as JSON array)
  permissions Json @default("[]")
  
  // Metadata
  metadata Json @default("{}")
  
  // Timestamps
  joinedAt  DateTime @default(now()) @map("joined_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_members")
}

model Plan {
  id          String @id @default(cuid())
  name        String @unique
  displayName String @map("display_name")
  description String?
  
  // Pricing
  price       Int    // in cents
  currency    String @default("USD")
  interval    PlanInterval @default(MONTHLY)
  
  // Limits (stored as JSON)
  limits      Json   @default("{}")
  
  // Features (stored as JSON array)
  features    Json   @default("[]")
  
  // Status
  isActive    Boolean @default(true) @map("is_active")
  isPublic    Boolean @default(true) @map("is_public")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  tenants     Tenant[]
  
  @@map("plans")
}

// Enums
enum TenantStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
  DELETED
}

enum TenantRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum MemberStatus {
  ACTIVE
  INVITED
  SUSPENDED
  INACTIVE
}

enum PlanInterval {
  MONTHLY
  YEARLY
}